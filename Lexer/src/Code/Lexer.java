/* The following code was generated by JFlex 1.4.3 on 5/21/23 5:30 PM */

package Code;
import static Code.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/21/23 5:30 PM from the specification file
 * <tt>C:/Users/luisr/EclipseWorkspace/Lexer/src/Code/Lexer.lex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\1\1\115\2\0\1\1\16\3\4\0\1\1\1\107\1\4"+
    "\1\114\1\2\1\105\1\34\1\7\1\100\1\101\1\104\1\103\1\102"+
    "\1\22\1\6\1\32\1\23\1\24\1\30\1\25\1\31\1\26\1\5"+
    "\1\27\1\27\1\5\1\33\1\0\1\111\1\106\1\110\2\0\1\41"+
    "\1\43\1\44\1\47\1\64\1\50\1\51\1\45\1\37\1\54\1\36"+
    "\1\46\1\40\1\55\1\56\1\57\1\60\1\53\1\42\1\52\1\37"+
    "\1\61\2\36\1\63\1\62\4\0\1\112\1\0\1\15\1\66\1\71"+
    "\1\14\1\12\1\16\1\74\1\75\1\65\2\10\1\17\1\72\1\67"+
    "\1\21\1\77\1\10\1\13\1\20\1\70\1\76\1\11\1\10\1\73"+
    "\2\10\3\0\1\113\41\3\2\0\4\2\4\0\1\2\2\0\1\3"+
    "\7\0\1\2\4\0\1\2\5\0\21\2\1\35\5\2\1\0\37\2"+
    "\1\0\u01ca\2\4\0\14\2\16\0\5\2\7\0\1\2\1\0\1\2"+
    "\21\0\160\3\5\2\1\0\2\2\2\0\4\2\10\0\1\2\1\0"+
    "\3\2\1\0\1\2\1\0\24\2\1\0\123\2\1\0\213\2\1\0"+
    "\5\3\2\0\236\2\11\0\46\2\2\0\1\2\7\0\47\2\7\0"+
    "\1\2\1\0\55\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\10\0\33\2\5\0\3\2\15\0\5\3\6\0\1\2\4\0"+
    "\13\3\5\0\53\2\37\3\4\0\2\2\1\3\143\2\1\0\1\2"+
    "\10\3\1\0\6\3\2\2\2\3\1\0\4\3\2\2\12\3\3\2"+
    "\2\0\1\2\17\0\1\3\1\2\1\3\36\2\33\3\2\0\131\2"+
    "\13\3\1\2\16\0\12\3\41\2\11\3\2\2\4\0\1\2\5\0"+
    "\26\2\4\3\1\2\11\3\1\2\3\3\1\2\5\3\22\0\31\2"+
    "\3\3\104\0\1\2\1\0\13\2\67\0\33\3\1\0\4\3\66\2"+
    "\3\3\1\2\22\3\1\2\7\3\12\2\2\3\2\0\12\3\1\0"+
    "\7\2\1\0\7\2\1\0\3\3\1\0\10\2\2\0\2\2\2\0"+
    "\26\2\1\0\7\2\1\0\1\2\3\0\4\2\2\0\1\3\1\2"+
    "\7\3\2\0\2\3\2\0\3\3\1\2\10\0\1\3\4\0\2\2"+
    "\1\0\3\2\2\3\2\0\12\3\4\2\7\0\1\2\5\0\3\3"+
    "\1\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2"+
    "\1\0\2\2\1\0\2\2\2\0\1\3\1\0\5\3\4\0\2\3"+
    "\2\0\3\3\3\0\1\3\7\0\4\2\1\0\1\2\7\0\14\3"+
    "\3\2\1\3\13\0\3\3\1\0\11\2\1\0\3\2\1\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2\10\3"+
    "\1\0\3\3\1\0\3\3\2\0\1\2\17\0\2\2\2\3\2\0"+
    "\12\3\1\0\1\2\17\0\3\3\1\0\10\2\2\0\2\2\2\0"+
    "\26\2\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2"+
    "\7\3\2\0\2\3\2\0\3\3\10\0\2\3\4\0\2\2\1\0"+
    "\3\2\2\3\2\0\12\3\1\0\1\2\20\0\1\3\1\2\1\0"+
    "\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0"+
    "\2\2\3\0\2\2\3\0\3\2\3\0\14\2\4\0\5\3\3\0"+
    "\3\3\1\0\4\3\2\0\1\2\6\0\1\3\16\0\12\3\11\0"+
    "\1\2\7\0\3\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\12\2\1\0\5\2\3\0\1\2\7\3\1\0\3\3\1\0\4\3"+
    "\7\0\2\3\1\0\2\2\6\0\2\2\2\3\2\0\12\3\22\0"+
    "\2\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0"+
    "\5\2\2\0\1\3\1\2\7\3\1\0\3\3\1\0\4\3\7\0"+
    "\2\3\7\0\1\2\1\0\2\2\2\3\2\0\12\3\1\0\2\2"+
    "\17\0\2\3\1\0\10\2\1\0\3\2\1\0\51\2\2\0\1\2"+
    "\7\3\1\0\3\3\1\0\4\3\1\2\10\0\1\3\10\0\2\2"+
    "\2\3\2\0\12\3\12\0\6\2\2\0\2\3\1\0\22\2\3\0"+
    "\30\2\1\0\11\2\1\0\1\2\2\0\7\2\3\0\1\3\4\0"+
    "\6\3\1\0\1\3\1\0\10\3\22\0\2\3\15\0\60\2\1\3"+
    "\2\2\7\3\4\0\10\2\10\3\1\0\12\3\47\0\2\2\1\0"+
    "\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0"+
    "\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0"+
    "\4\2\1\3\2\2\6\3\1\0\2\3\1\2\2\0\5\2\1\0"+
    "\1\2\1\0\6\3\2\0\12\3\2\0\4\2\40\0\1\2\27\0"+
    "\2\3\6\0\12\3\13\0\1\3\1\0\1\3\1\0\1\3\4\0"+
    "\2\3\10\2\1\0\44\2\4\0\24\3\1\0\2\3\5\2\13\3"+
    "\1\0\44\3\11\0\1\3\71\0\53\2\24\3\1\2\12\3\6\0"+
    "\6\2\4\3\4\2\3\3\1\2\3\3\2\2\7\3\3\2\4\3"+
    "\15\2\14\3\1\2\17\3\2\0\46\2\1\0\1\2\5\0\1\2"+
    "\2\0\53\2\1\0\u014d\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\51\2\1\0\4\2\2\0\41\2\1\0\4\2"+
    "\2\0\7\2\1\0\1\2\1\0\4\2\2\0\17\2\1\0\71\2"+
    "\1\0\4\2\2\0\103\2\2\0\3\3\40\0\20\2\20\0\125\2"+
    "\14\0\u026c\2\2\0\21\2\1\0\32\2\5\0\113\2\3\0\3\2"+
    "\17\0\15\2\1\0\4\2\3\3\13\0\22\2\3\3\13\0\22\2"+
    "\2\3\14\0\15\2\1\0\3\2\1\0\2\3\14\0\64\2\40\3"+
    "\3\0\1\2\3\0\2\2\1\3\2\0\12\3\41\0\3\3\2\0"+
    "\12\3\6\0\130\2\10\0\51\2\1\3\1\2\5\0\106\2\12\0"+
    "\35\2\3\0\14\3\4\0\14\3\12\0\12\3\36\2\2\0\5\2"+
    "\13\0\54\2\4\0\21\3\7\2\2\3\6\0\12\3\46\0\27\2"+
    "\5\3\4\0\65\2\12\3\1\0\35\3\2\0\13\3\6\0\12\3"+
    "\15\0\1\2\130\0\5\3\57\2\21\3\7\2\4\0\12\3\21\0"+
    "\11\3\14\0\3\3\36\2\15\3\2\2\12\3\54\2\16\3\14\0"+
    "\44\2\24\3\10\0\12\3\3\0\3\2\12\3\44\2\122\0\3\3"+
    "\1\0\25\3\4\2\1\3\4\2\3\3\2\2\11\0\300\2\47\3"+
    "\25\0\4\3\u0116\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0"+
    "\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0"+
    "\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2\16\0"+
    "\5\3\32\0\5\3\20\0\2\2\23\0\1\2\13\0\5\3\5\0"+
    "\6\3\1\0\1\2\15\0\1\2\20\0\15\2\3\0\33\2\25\0"+
    "\15\3\4\0\1\3\3\0\14\3\21\0\1\2\4\0\1\2\2\0"+
    "\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\4\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0"+
    "\1\2\21\0\51\2\u0a77\0\57\2\1\0\57\2\1\0\205\2\6\0"+
    "\4\2\3\3\2\2\14\0\46\2\1\0\1\2\5\0\1\2\2\0"+
    "\70\2\7\0\1\2\17\0\1\3\27\2\11\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\40\3\57\0\1\2\u01d5\0\3\2\31\0\11\2"+
    "\6\3\1\0\5\2\2\0\5\2\4\0\126\2\2\0\2\3\2\0"+
    "\3\2\1\0\132\2\1\0\4\2\5\0\51\2\3\0\136\2\21\0"+
    "\33\2\65\0\20\2\u0200\0\u19b6\2\112\0\u51cd\2\63\0\u048d\2\103\0"+
    "\56\2\2\0\u010d\2\3\0\20\2\12\3\2\2\24\0\57\2\1\3"+
    "\4\0\12\3\1\0\31\2\7\0\1\3\120\2\2\3\45\0\11\2"+
    "\2\0\147\2\2\0\4\2\1\0\4\2\14\0\13\2\115\0\12\2"+
    "\1\3\3\2\1\3\4\2\1\3\27\2\5\3\20\0\1\2\7\0"+
    "\64\2\14\0\2\3\62\2\21\3\13\0\12\3\6\0\22\3\6\2"+
    "\3\0\1\2\4\0\12\3\34\2\10\3\2\0\27\2\15\3\14\0"+
    "\35\2\3\0\4\3\57\2\16\3\16\0\1\2\12\3\46\0\51\2"+
    "\16\3\11\0\3\2\1\3\10\2\2\3\2\0\12\3\6\0\27\2"+
    "\3\0\1\2\1\3\4\0\60\2\1\3\1\2\3\3\2\2\2\3"+
    "\5\2\2\3\1\2\1\3\1\2\30\0\3\2\2\0\13\2\5\3"+
    "\2\0\3\2\2\3\12\0\6\2\2\0\6\2\2\0\6\2\11\0"+
    "\7\2\1\0\7\2\221\0\43\2\10\3\1\0\2\3\2\0\12\3"+
    "\6\0\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u016e\2\2\0\152\2"+
    "\46\0\7\2\14\0\5\2\5\0\1\2\1\3\12\2\1\0\15\2"+
    "\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\154\2"+
    "\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2\3\0\20\3"+
    "\20\0\7\3\14\0\2\2\30\0\3\2\31\0\1\2\6\0\5\2"+
    "\1\0\207\2\2\0\1\3\4\0\1\2\13\0\12\3\7\0\32\2"+
    "\4\0\1\2\1\0\32\2\13\0\131\2\3\0\6\2\2\0\6\2"+
    "\2\0\6\2\2\0\3\2\3\0\2\2\3\0\2\2\22\0\3\3"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\2\1\1\1\5\1\2"+
    "\7\4\1\6\2\1\1\7\1\10\1\2\10\4\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\2\1\20"+
    "\1\21\1\4\1\22\1\3\1\0\1\23\1\1\1\24"+
    "\1\0\13\4\1\25\1\26\1\27\1\1\1\30\1\0"+
    "\12\4\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\4\1\1\1\41\3\4\1\42\5\4\1\43"+
    "\4\4\2\0\13\4\1\44\1\45\1\1\13\4\1\46"+
    "\1\4\3\0\6\4\1\47\1\50\1\4\1\51\1\4"+
    "\1\52\1\1\1\0\7\4\1\53\1\54\3\4\2\0"+
    "\3\4\1\55\3\4\2\0\1\4\1\56\1\4\1\57"+
    "\2\4\1\0\1\4\1\60\1\4\3\0\3\4\1\61"+
    "\3\4\3\0\3\4\1\62\1\0\1\63\1\64\2\0"+
    "\3\4\1\0\2\4\3\0\1\65\1\66\1\67\1\0"+
    "\1\4\1\70\3\0\4\4\1\0\1\71\1\4\4\0"+
    "\1\72\1\0\1\73\1\0\4\4\1\0\1\4\1\74"+
    "\1\75\1\0\2\4\1\0\1\4\2\0\2\4\1\0"+
    "\1\4\2\0\2\76\16\4\1\0\1\4\1\0\1\76"+
    "\1\0\1\77\1\0\1\4\1\0\1\100\1\0\1\4"+
    "\2\0\1\4\1\101\1\0\1\4\1\0\1\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\116\0\u01d4"+
    "\0\u0222\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444"+
    "\0\u0492\0\u04e0\0\u052e\0\116\0\u057c\0\u05ca\0\u0618\0\u0666"+
    "\0\u06b4\0\u0702\0\u0750\0\u079e\0\u07ec\0\116\0\116\0\116"+
    "\0\u083a\0\u0888\0\u08d6\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c"+
    "\0\116\0\u0aaa\0\u0138\0\116\0\u0af8\0\u0b46\0\u0b94\0\u0be2"+
    "\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6\0\u0e04\0\u0e52"+
    "\0\u0ea0\0\u0eee\0\u0f3c\0\116\0\116\0\u0f8a\0\116\0\u0fd8"+
    "\0\u1026\0\u1074\0\u10c2\0\u1110\0\u115e\0\u11ac\0\u11fa\0\u1248"+
    "\0\u1296\0\u12e4\0\116\0\116\0\116\0\116\0\116\0\116"+
    "\0\116\0\116\0\u1332\0\u1380\0\u13ce\0\116\0\u141c\0\u146a"+
    "\0\u14b8\0\352\0\u1506\0\u1554\0\u15a2\0\u15f0\0\u163e\0\352"+
    "\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae"+
    "\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e"+
    "\0\u1b6c\0\352\0\352\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2"+
    "\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\352"+
    "\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184"+
    "\0\u21d2\0\u2220\0\352\0\352\0\u226e\0\352\0\u22bc\0\352"+
    "\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490\0\u24de\0\u252c"+
    "\0\u257a\0\u25c8\0\352\0\u2616\0\u2664\0\u26b2\0\u2700\0\u274e"+
    "\0\u279c\0\u27ea\0\u2838\0\352\0\u2886\0\u28d4\0\u2922\0\u2970"+
    "\0\u29be\0\u2a0c\0\352\0\u2a5a\0\352\0\u2aa8\0\u2af6\0\u2b44"+
    "\0\u2b92\0\352\0\u2be0\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18\0\u2d66"+
    "\0\u2db4\0\352\0\u2e02\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88"+
    "\0\u2fd6\0\u3024\0\u3072\0\352\0\u30c0\0\u310e\0\352\0\u315c"+
    "\0\u31aa\0\u31f8\0\u3246\0\u3294\0\u32e2\0\u3330\0\u337e\0\u33cc"+
    "\0\u341a\0\u3468\0\u34b6\0\352\0\352\0\u3504\0\u3552\0\116"+
    "\0\u35a0\0\u35ee\0\u363c\0\u368a\0\u36d8\0\u3726\0\u3774\0\u37c2"+
    "\0\352\0\u3810\0\u385e\0\u38ac\0\u38fa\0\u3948\0\352\0\u3996"+
    "\0\352\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a\0\u3bb8"+
    "\0\u3c06\0\116\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda"+
    "\0\u3e28\0\u3e76\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\116"+
    "\0\352\0\u404a\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u421e"+
    "\0\u426c\0\u42ba\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u4440\0\u448e"+
    "\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u4614\0\u4662\0\u46b0\0\u46fe"+
    "\0\352\0\u474c\0\u479a\0\u47e8\0\u4836\0\u4884\0\116\0\u48d2"+
    "\0\u4920\0\u496e\0\352\0\116";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\4\1\11\1\12\1\13\1\14\1\4\1\15\1\16"+
    "\1\17\1\4\1\20\2\21\3\6\1\22\1\6\1\23"+
    "\1\24\1\25\1\26\27\27\1\30\2\4\1\31\1\32"+
    "\1\33\2\4\1\34\1\4\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\3\117\0\1\3\113\0\1\3\2\0"+
    "\2\4\1\0\1\4\2\0\12\4\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\3\0\4\53\1\54\111\53\5\0"+
    "\1\55\1\56\14\0\7\55\71\0\1\57\2\0\12\57"+
    "\1\0\7\57\4\0\42\57\20\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\60\2\4\1\61\4\4\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\12\4\1\0\7\4\3\0\32\4\1\62\10\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\4\2\0\6\4"+
    "\1\63\2\4\1\64\1\0\7\4\3\0\43\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\2\4\1\65"+
    "\7\4\1\0\7\4\3\0\43\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\2\4\1\66\2\4\1\67"+
    "\4\4\1\0\7\4\3\0\30\4\1\70\10\4\1\71"+
    "\1\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\11\4\1\72\1\0\7\4\3\0\43\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\3\0\30\4\1\73\12\4\12\0\1\4\25\0\1\74"+
    "\63\0\1\75\14\0\1\76\1\56\14\0\7\76\71\0"+
    "\1\55\1\56\14\0\3\76\2\55\2\76\172\0\1\77"+
    "\43\0\31\100\33\0\2\4\1\0\1\4\2\0\12\4"+
    "\1\0\7\4\2\0\1\100\30\101\13\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\2\0\1\100\2\101\1\102\1\101\1\102\14\101\1\102"+
    "\5\101\1\102\13\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\12\4\1\0\7\4\3\0\32\4\1\103"+
    "\10\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\2\4\1\104\7\4\1\0\7\4\3\0\43\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\11\4\1\105"+
    "\1\0\7\4\3\0\41\4\1\106\1\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\3\0\30\4\1\107\12\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\11\4\1\110\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\3\4\1\111\1\4\1\112\4\4\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\106\0\1\113\2\0\1\114\115\0"+
    "\1\115\115\0\1\116\115\0\1\117\115\0\1\120\115\0"+
    "\1\121\115\0\1\122\11\0\2\4\1\0\1\4\2\0"+
    "\12\4\1\0\7\4\3\0\21\4\1\123\4\4\1\124"+
    "\14\4\12\0\1\4\3\0\115\52\6\0\1\125\1\56"+
    "\14\0\7\125\71\0\1\56\15\0\7\56\73\0\1\126"+
    "\110\0\2\4\1\0\1\4\2\0\3\4\1\127\6\4"+
    "\1\0\7\4\3\0\43\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\3\4\1\130\6\4\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\12\4\1\0\7\4\3\0\33\4\1\131\7\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\4\2\0\12\4"+
    "\1\0\7\4\3\0\34\4\1\132\6\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\3\0\35\4\1\133\5\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\1\4\1\134\10\4\1\0\7\4"+
    "\3\0\34\4\1\135\6\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\12\4\1\0\7\4\3\0\34\4"+
    "\1\136\6\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\7\4\1\137\2\4\1\0\7\4\3\0\43\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\4\2\0\12\4"+
    "\1\0\7\4\3\0\32\4\1\140\10\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\3\0\32\4\1\141\10\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\12\4\1\0\7\4\3\0\37\4"+
    "\1\142\3\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\12\4\1\0\7\4\3\0\32\4\1\143\2\4"+
    "\1\144\5\4\12\0\1\4\10\0\1\125\1\56\14\0"+
    "\7\125\1\0\1\145\116\0\31\146\33\0\2\4\1\0"+
    "\1\4\2\0\12\4\1\0\7\4\2\0\1\146\30\147"+
    "\13\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\12\4\1\0\7\4\2\0\1\146\1\147\27\150\13\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\4\2\0\12\4"+
    "\1\0\7\4\3\0\30\4\1\151\12\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\3\0\36\4\1\152\4\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\4\4\1\153\5\4\1\0\7\4"+
    "\3\0\35\4\1\154\5\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\3\4\1\155\6\4\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\156\7\4\1\0\7\4\3\0\43\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\4\2\0\3\4"+
    "\1\157\6\4\1\0\7\4\3\0\43\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\11\4\1\160\1\0"+
    "\7\4\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\3\4\1\161\6\4\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\12\4\1\0\7\4\3\0\43\4\12\0\1\162\5\0"+
    "\2\4\1\0\1\4\2\0\12\4\1\0\7\4\3\0"+
    "\43\4\12\0\1\163\10\0\1\164\1\56\14\0\7\164"+
    "\66\0\2\4\1\0\1\4\2\0\4\4\1\165\5\4"+
    "\1\0\7\4\3\0\43\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\12\4\1\0\7\4\3\0\30\4"+
    "\1\166\12\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\167\6\4\1\170\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\12\4\1\0\7\4\3\0\42\4\1\171\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\11\4\1\172\1\0"+
    "\7\4\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\12\4\1\0\7\4\3\0\30\4\1\173"+
    "\12\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\12\4\1\0\7\4\3\0\40\4\1\174\2\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\10\4\1\175"+
    "\1\4\1\0\7\4\3\0\43\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\12\4\1\0\7\4\3\0"+
    "\34\4\1\176\6\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\12\4\1\0\7\4\3\0\30\4\1\177"+
    "\12\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\11\4\1\200\1\0\7\4\3\0\43\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\3\0\31\4\1\201\11\4\12\0\1\4\26\0\4\202"+
    "\1\0\2\202\71\0\1\203\15\0\7\203\2\0\31\204"+
    "\33\0\2\4\1\0\1\205\2\0\12\4\1\0\7\205"+
    "\2\0\1\204\30\206\13\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\205\2\0\12\4\1\0\7\205\2\0\1\204"+
    "\1\206\27\207\13\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\12\4\1\0\7\4\3\0\34\4\1\210"+
    "\6\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\12\4\1\0\7\4\3\0\33\4\1\211\7\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\12\4\1\0"+
    "\7\4\3\0\30\4\1\212\12\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\11\4\1\213\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\12\4\1\0\7\4\3\0\42\4\1\214\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\12\4\1\0"+
    "\7\4\3\0\32\4\1\215\10\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\5\4\1\216\4\4\1\0"+
    "\7\4\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\12\4\1\0\7\4\3\0\34\4\1\217"+
    "\6\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\5\4\1\220\4\4\1\0\7\4\3\0\43\4\12\0"+
    "\1\4\10\0\1\221\1\56\13\0\1\222\7\221\66\0"+
    "\2\4\1\0\1\4\2\0\5\4\1\223\4\4\1\0"+
    "\7\4\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\5\4\1\224\4\4\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\3\4\1\225\6\4\1\0\7\4\3\0\43\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\12\4\1\0"+
    "\7\4\3\0\32\4\1\226\10\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\2\4\1\227\7\4\1\0"+
    "\7\4\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\7\4\1\230\2\4\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\12\4\1\0\7\4\3\0\35\4\1\231\5\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\5\4\1\232"+
    "\4\4\1\0\7\4\3\0\43\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\11\4\1\233\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\12\4\1\0\7\4\3\0\30\4\1\234\12\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\4\2\0\12\4"+
    "\1\0\7\4\3\0\34\4\1\235\6\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\11\4\1\236\1\0"+
    "\7\4\3\0\43\4\12\0\1\4\10\0\1\237\15\0"+
    "\7\237\71\0\1\240\15\0\7\240\71\0\1\203\15\0"+
    "\7\203\66\0\2\4\1\0\1\241\2\0\12\4\1\0"+
    "\7\241\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\205\2\0\12\4\1\0\7\205\3\0\43\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\242\2\0\12\4\1\0"+
    "\7\242\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\12\4\1\0\7\4\3\0\30\4\1\243"+
    "\12\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\11\4\1\244\1\0\7\4\3\0\43\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\3\0\37\4\1\245\3\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\12\4\1\0\7\4\3\0\33\4"+
    "\1\246\7\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\247\7\4\1\0\7\4\3\0\43\4"+
    "\12\0\1\4\10\0\1\221\1\56\14\0\7\221\107\0"+
    "\1\250\1\251\73\0\2\4\1\0\1\4\2\0\4\4"+
    "\1\233\5\4\1\0\7\4\3\0\43\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\3\0\31\4\1\252\11\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\11\4\1\253\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\12\4\1\0\7\4\3\0\34\4\1\254\6\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\3\4\1\255"+
    "\6\4\1\0\7\4\3\0\43\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\1\4\1\256\10\4\1\0"+
    "\7\4\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\5\4\1\257\4\4\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\12\4\1\260\7\4\3\0\43\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\11\4\1\261\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\11\4\1\262\1\0\7\4\3\0\43\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\7\4\1\263"+
    "\2\4\1\0\7\4\3\0\43\4\12\0\1\4\36\0"+
    "\1\264\105\0\1\265\1\266\73\0\2\4\1\0\1\4"+
    "\2\0\12\4\1\0\1\267\1\270\5\4\3\0\43\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\271\2\0\12\4"+
    "\1\0\7\271\3\0\43\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\11\4\1\272\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\11\4\1\273\1\0\7\4\3\0\43\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\4\2\0\3\4\1\274\6\4"+
    "\1\0\7\4\3\0\43\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\4\4\1\275\5\4\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\10\0\1\276\16\0\4\277"+
    "\1\300\1\276\107\0\1\277\1\276\3\0\1\277\67\0"+
    "\2\4\1\0\1\4\2\0\7\4\1\301\2\4\1\0"+
    "\7\4\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\2\4\1\302\7\4\1\0\7\4\3\0"+
    "\43\4\12\0\1\4\5\0\2\4\1\0\1\4\2\0"+
    "\2\4\1\303\7\4\1\0\7\4\3\0\43\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\7\4\1\304"+
    "\2\4\1\0\7\4\3\0\43\4\12\0\1\4\100\0"+
    "\1\305\22\0\2\4\1\0\1\4\2\0\12\4\1\0"+
    "\7\4\3\0\32\4\1\306\10\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\4\2\0\11\4\1\307\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\26\0\4\310\1\0\2\310"+
    "\71\0\1\311\16\0\6\311\107\0\2\311\3\0\1\311"+
    "\67\0\2\4\1\0\1\312\2\0\12\4\1\0\1\4"+
    "\6\312\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\4\2\0\12\4\1\0\2\312\3\4\1\312\1\4"+
    "\3\0\43\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\12\4\1\0\1\313\1\314\5\4\3\0\43\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\4\2\0\12\4"+
    "\1\315\7\4\3\0\43\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\5\4\1\316\4\4\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\12\4\1\0\7\4\3\0\30\4\1\317\12\4"+
    "\12\0\1\4\25\0\1\320\115\0\1\321\115\0\1\322"+
    "\75\0\2\4\1\0\1\4\2\0\2\4\1\323\7\4"+
    "\1\0\7\4\3\0\43\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\10\4\1\324\1\4\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\5\0\2\4\1\0\1\4"+
    "\2\0\3\4\1\325\6\4\1\0\7\4\3\0\43\4"+
    "\12\0\1\4\24\0\1\326\76\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\327\7\4\1\0\7\4\3\0\43\4"+
    "\12\0\1\4\10\0\1\330\15\0\7\330\107\0\1\331"+
    "\1\332\1\333\2\0\1\332\67\0\2\4\1\0\1\4"+
    "\2\0\12\4\1\0\1\334\1\335\1\336\2\4\1\335"+
    "\1\4\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\337\2\0\12\4\1\0\1\4\6\337\3\0\43\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\4\2\0\12\4"+
    "\1\0\2\337\3\4\1\337\1\4\3\0\43\4\12\0"+
    "\1\4\102\0\1\340\20\0\2\4\1\0\1\4\2\0"+
    "\10\4\1\341\1\4\1\0\7\4\3\0\43\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\12\4\1\0"+
    "\7\4\3\0\35\4\1\342\5\4\12\0\1\4\26\0"+
    "\1\343\1\344\1\345\2\0\1\344\110\0\1\343\1\344"+
    "\1\346\2\0\1\344\110\0\1\343\1\344\3\0\1\344"+
    "\67\0\2\4\1\0\1\4\2\0\10\4\1\347\1\4"+
    "\1\0\7\4\3\0\43\4\12\0\1\4\16\0\1\350"+
    "\104\0\2\4\1\0\1\4\2\0\10\4\1\351\1\4"+
    "\1\0\7\4\3\0\43\4\12\0\1\4\10\0\1\352"+
    "\16\0\6\352\71\0\1\352\15\0\7\352\107\0\2\352"+
    "\73\0\2\4\1\0\1\353\2\0\12\4\1\0\1\4"+
    "\6\353\3\0\43\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\353\2\0\12\4\1\0\7\353\3\0\43\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\4\2\0\12\4\1\0"+
    "\2\353\5\4\3\0\43\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\4\2\0\12\4\1\0\1\354\1\355\1\356"+
    "\2\4\1\355\1\4\3\0\43\4\12\0\1\4\16\0"+
    "\1\357\104\0\2\4\1\0\1\4\2\0\12\4\1\0"+
    "\7\4\3\0\30\4\1\360\12\4\12\0\1\4\10\0"+
    "\1\361\16\0\6\361\71\0\1\361\15\0\7\361\107\0"+
    "\1\361\115\0\2\361\106\0\1\362\105\0\1\363\15\0"+
    "\7\363\4\0\27\363\33\0\2\4\1\0\1\364\2\0"+
    "\12\4\1\0\7\364\3\0\1\4\27\364\13\4\12\0"+
    "\1\4\5\0\2\4\1\0\1\365\2\0\12\4\1\0"+
    "\1\4\6\365\3\0\43\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\365\2\0\12\4\1\0\7\365\3\0\43\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\4\2\0\12\4"+
    "\1\0\2\365\5\4\3\0\43\4\12\0\1\4\70\0"+
    "\1\366\32\0\2\4\1\0\1\4\2\0\2\4\1\367"+
    "\7\4\1\0\7\4\3\0\43\4\12\0\1\4\35\0"+
    "\1\370\70\0\1\371\15\0\7\371\4\0\27\371\33\0"+
    "\2\4\1\0\1\372\2\0\12\4\1\0\7\372\3\0"+
    "\1\4\27\372\13\4\12\0\1\4\5\0\2\4\1\0"+
    "\1\364\2\0\12\4\1\0\7\364\3\0\1\4\2\364"+
    "\1\373\4\364\1\373\17\364\13\4\12\0\1\4\72\0"+
    "\1\374\30\0\2\4\1\0\1\4\2\0\12\4\1\0"+
    "\7\4\3\0\32\4\1\375\10\4\12\0\1\4\26\0"+
    "\2\376\3\0\1\377\72\0\1\u0100\15\0\7\u0100\4\0"+
    "\27\u0100\33\0\2\4\1\0\1\u0101\2\0\12\4\1\0"+
    "\7\u0101\3\0\1\4\27\u0101\13\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\372\2\0\12\4\1\0\7\372\3\0"+
    "\1\4\2\372\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107"+
    "\1\372\1\u0108\1\372\1\u0109\1\u010a\1\372\1\u010b\1\u010c"+
    "\1\u010b\1\u010d\1\u0109\1\u010e\1\u0103\1\u010f\1\372\13\4"+
    "\12\0\1\4\74\0\1\u0110\26\0\2\4\1\0\1\4"+
    "\2\0\12\4\1\0\7\4\3\0\33\4\1\u0111\7\4"+
    "\12\0\1\4\10\0\1\u0112\15\0\7\u0112\107\0\3\u0112"+
    "\2\0\2\u0112\66\0\2\4\1\0\1\u0101\2\0\12\4"+
    "\1\0\7\u0101\3\0\1\4\4\u0101\1\u0113\1\u0101\1\u0113"+
    "\10\u0101\1\u0113\7\u0101\13\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\u0101\2\0\12\4\1\0\7\u0101\3\0\1\4"+
    "\4\u0101\1\u0113\22\u0101\13\4\12\0\1\4\5\0\2\4"+
    "\1\0\1\u0101\2\0\12\4\1\0\7\u0101\3\0\1\4"+
    "\10\u0101\1\u0113\4\u0101\1\u0113\3\u0101\1\u0113\5\u0101\13\4"+
    "\12\0\1\4\5\0\2\4\1\0\1\u0101\2\0\12\4"+
    "\1\0\7\u0101\3\0\1\4\4\u0101\1\u0113\1\u0101\1\u0113"+
    "\20\u0101\13\4\12\0\1\4\5\0\2\4\1\0\1\u0101"+
    "\2\0\12\4\1\0\7\u0101\3\0\1\4\2\u0101\1\u0113"+
    "\1\u0101\1\u0113\1\u0101\3\u0113\16\u0101\13\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\u0101\2\0\12\4\1\0\7\u0101"+
    "\3\0\1\4\13\u0101\1\u0113\13\u0101\13\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\u0101\2\0\12\4\1\0\7\u0101"+
    "\3\0\1\4\12\u0101\2\u0113\13\u0101\13\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\u0101\2\0\12\4\1\0\7\u0101"+
    "\3\0\1\4\14\u0101\2\u0113\11\u0101\13\4\12\0\1\4"+
    "\5\0\2\4\1\0\1\u0101\2\0\12\4\1\0\7\u0101"+
    "\3\0\1\4\4\u0101\1\u0113\1\u0101\1\u0113\1\u0101\1\u0113"+
    "\16\u0101\13\4\12\0\1\4\5\0\2\4\1\0\1\u0101"+
    "\2\0\12\4\1\0\7\u0101\3\0\1\4\6\u0101\1\u0113"+
    "\20\u0101\13\4\12\0\1\4\5\0\2\4\1\0\1\u0101"+
    "\2\0\12\4\1\0\7\u0101\3\0\1\4\10\u0101\1\u0113"+
    "\3\u0101\1\u0113\11\u0101\1\u0113\13\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\u0101\2\0\12\4\1\0\7\u0101\3\0"+
    "\1\4\10\u0101\1\u0113\16\u0101\13\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\u0101\2\0\12\4\1\0\7\u0101\3\0"+
    "\1\4\24\u0101\1\u0113\2\u0101\13\4\12\0\1\4\5\0"+
    "\2\4\1\0\1\u0101\2\0\12\4\1\0\7\u0101\3\0"+
    "\1\4\17\u0101\1\u0113\7\u0101\13\4\12\0\1\4\70\0"+
    "\1\u0114\32\0\2\4\1\0\1\4\2\0\11\4\1\u0115"+
    "\1\0\7\4\3\0\43\4\12\0\1\4\36\0\1\u0116"+
    "\64\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\3\0\1\4\1\u0117\1\4\1\u0117\1\4\14\u0117\1\4"+
    "\5\u0117\14\4\12\0\1\4\102\0\1\u0118\20\0\2\4"+
    "\1\0\1\4\2\0\10\4\1\u0119\1\4\1\0\7\4"+
    "\3\0\43\4\12\0\1\4\26\0\4\u011a\1\0\2\u011a"+
    "\66\0\2\4\1\0\1\4\2\0\12\4\1\0\7\4"+
    "\3\0\1\4\1\u011b\1\4\1\u011b\1\4\14\u011b\1\4"+
    "\5\u011b\14\4\12\0\1\4\20\0\1\u011c\105\0\1\u011d"+
    "\15\0\7\u011d\66\0\2\4\1\0\1\4\2\0\12\4"+
    "\1\0\7\4\3\0\1\4\1\u011e\1\4\1\u011e\1\4"+
    "\14\u011e\1\4\5\u011e\14\4\12\0\1\4\22\0\1\u011f"+
    "\131\0\1\u0120\64\0\2\4\1\0\1\u0121\2\0\12\4"+
    "\1\0\7\u0121\3\0\1\4\27\u0121\13\4\12\0\1\4"+
    "\26\0\4\u0122\1\0\2\u0122\66\0\2\4\1\0\1\u0123"+
    "\2\0\12\4\1\0\7\u0123\3\0\43\4\12\0\1\4"+
    "\10\0\1\u0124\15\0\7\u0124\64\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18876];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\1\11\14\1\1\11\11\1\3\11"+
    "\10\1\1\11\1\1\1\0\1\11\2\1\1\0\14\1"+
    "\2\11\1\1\1\11\1\0\12\1\10\11\3\1\1\11"+
    "\16\1\2\0\33\1\3\0\15\1\1\0\14\1\2\0"+
    "\7\1\2\0\6\1\1\0\3\1\3\0\7\1\3\0"+
    "\4\1\1\0\2\1\2\0\3\1\1\0\2\1\3\0"+
    "\3\1\1\0\1\1\1\11\3\0\4\1\1\0\2\1"+
    "\4\0\1\1\1\0\1\1\1\0\4\1\1\0\2\1"+
    "\1\11\1\0\2\1\1\0\1\1\2\0\2\1\1\0"+
    "\1\1\2\0\1\11\17\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\11\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2302) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { lexeme=yytext(); return tk_funciones;
          }
        case 68: break;
        case 12: 
          { return tk_suma;
          }
        case 69: break;
        case 53: 
          { lexeme=yytext(); return tk_variable;
          }
        case 70: break;
        case 2: 
          { return Error;
          }
        case 71: break;
        case 62: 
          { lexeme=yytext(); return tk_rfc_real;
          }
        case 72: break;
        case 24: 
          { return tk_asignacion_division;
          }
        case 73: break;
        case 22: 
          { return tk_decremento;
          }
        case 74: break;
        case 20: 
          { lexeme=yytext(); return tk_decimal_real;
          }
        case 75: break;
        case 31: 
          { return tk_mayor_igual;
          }
        case 76: break;
        case 25: 
          { return tk_incremento;
          }
        case 77: break;
        case 17: 
          { return tk_menor;
          }
        case 78: break;
        case 9: 
          { return tk_parentesis_abierto;
          }
        case 79: break;
        case 37: 
          { return tk_y;
          }
        case 80: break;
        case 39: 
          { lexeme=yytext(); return tk_como;
          }
        case 81: break;
        case 56: 
          { lexeme=yytext(); return tk_hora_real;
          }
        case 82: break;
        case 60: 
          { lexeme=yytext(); return tk_fecha_real;
          }
        case 83: break;
        case 38: 
          { lexeme=yytext(); return tk_sino;
          }
        case 84: break;
        case 14: 
          { return tk_modulo;
          }
        case 85: break;
        case 19: 
          { lexeme=yytext(); return tk_texto_real;
          }
        case 86: break;
        case 10: 
          { return tk_parentesis_cerrado;
          }
        case 87: break;
        case 51: 
          { lexeme=yytext(); return tk_funcion;
          }
        case 88: break;
        case 29: 
          { return tk_igualdad;
          }
        case 89: break;
        case 46: 
          { lexeme=yytext(); return tk_entero;
          }
        case 90: break;
        case 1: 
          { lexeme=yytext(); return tk_entero_real;
          }
        case 91: break;
        case 57: 
          { lexeme=yytext(); return tk_mientras;
          }
        case 92: break;
        case 44: 
          { lexeme=yytext(); return tk_logico_real;
          }
        case 93: break;
        case 26: 
          { return tk_asignacion_suma;
          }
        case 94: break;
        case 33: 
          { lexeme=yytext(); return tk_simbolo_real;
          }
        case 95: break;
        case 23: 
          { return tk_asignacion_resta;
          }
        case 96: break;
        case 36: 
          { return tk_o;
          }
        case 97: break;
        case 55: 
          { lexeme=yytext(); return tk_devolver;
          }
        case 98: break;
        case 4: 
          { lexeme=yytext(); return tk_identificador;
          }
        case 99: break;
        case 63: 
          { lexeme=yytext(); return tk_procedimiento;
          }
        case 100: break;
        case 52: 
          { lexeme=yytext(); return tk_simbolo;
          }
        case 101: break;
        case 30: 
          { return tk_desigualdad;
          }
        case 102: break;
        case 45: 
          { lexeme=yytext(); return tk_texto;
          }
        case 103: break;
        case 28: 
          { return tk_asignacion_modulo;
          }
        case 104: break;
        case 32: 
          { return tk_menor_igual;
          }
        case 105: break;
        case 15: 
          { return tk_asignacion;
          }
        case 106: break;
        case 49: 
          { lexeme=yytext(); return tk_inicio;
          }
        case 107: break;
        case 43: 
          { lexeme=yytext(); return tk_fecha;
          }
        case 108: break;
        case 5: 
          { return tk_punto;
          }
        case 109: break;
        case 50: 
          { lexeme=yytext(); return tk_decimal;
          }
        case 110: break;
        case 61: 
          { lexeme=yytext(); return tk_fecha_hora;
          }
        case 111: break;
        case 58: 
          { lexeme=yytext(); return tk_variables;
          }
        case 112: break;
        case 6: 
          { return tk_resta;
          }
        case 113: break;
        case 65: 
          { lexeme=yytext(); return tk_codigo_principal;
          }
        case 114: break;
        case 16: 
          { return tk_mayor;
          }
        case 115: break;
        case 34: 
          { lexeme=yytext(); return tk_rfc;
          }
        case 116: break;
        case 7: 
          { return tk_division;
          }
        case 117: break;
        case 40: 
          { lexeme=yytext(); return tk_curp;
          }
        case 118: break;
        case 66: 
          { lexeme=yytext(); return tk_curp_real;
          }
        case 119: break;
        case 21: 
          { lexeme=yytext(); return tk_si;
          }
        case 120: break;
        case 64: 
          { lexeme=yytext(); return tk_procedimientos;
          }
        case 121: break;
        case 41: 
          { lexeme=yytext(); return tk_hora;
          }
        case 122: break;
        case 13: 
          { return tk_multiplicacion;
          }
        case 123: break;
        case 48: 
          { lexeme=yytext(); return tk_logico;
          }
        case 124: break;
        case 3: 
          { /*Ignore*/
          }
        case 125: break;
        case 27: 
          { return tk_asignacion_multiplicacion;
          }
        case 126: break;
        case 35: 
          { lexeme=yytext(); return tk_fin;
          }
        case 127: break;
        case 67: 
          { lexeme=yytext(); return tk_fecha_hora_real;
          }
        case 128: break;
        case 47: 
          { lexeme=yytext(); return tk_romper;
          }
        case 129: break;
        case 42: 
          { lexeme=yytext(); return tk_para;
          }
        case 130: break;
        case 11: 
          { return tk_coma;
          }
        case 131: break;
        case 8: 
          { return tk_dos_puntos;
          }
        case 132: break;
        case 18: 
          { return tk_negacion;
          }
        case 133: break;
        case 54: 
          { lexeme=yytext(); return tk_entonces;
          }
        case 134: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
